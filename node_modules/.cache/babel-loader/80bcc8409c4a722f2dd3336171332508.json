{"ast":null,"code":"var _jsxFileName = \"/Users/anandkumar/Documents/github/c360-playstation/src/Components/ProfileDialog/Journey/JourneyCard.js\";\nimport React, { Component } from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { Bar } from 'react-chartjs-2';\n\nclass JourneyCard extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: []\n    };\n  }\n\n  componentDidMount() {\n    const attributes = this.props.attributes;\n    const profile = this.props.profile;\n    const allCats = profile[\"all_categories\"] == null ? \"\" : profile[\"all_categories\"];\n    const plays = profile[\"game_minutes\"] == null ? \"\" : profile[\"game_minutes\"];\n    var Gcats = profile[\"game_category\"] == null ? \"\" : profile[\"game_category\"];\n    var return_time = [];\n    var return_cats = [];\n    let array = []; //All category array is built here\n\n    var catarrays = [];\n    var catArr = allCats;\n    catarrays = catArr.split(\",\");\n\n    for (let i = 0; i < catarrays.length; i++) {\n      var catarray = catarrays[i];\n      array.push(catarray);\n    } // All game minutes\n\n\n    for (let h = 0; h < plays.length; h++) {\n      var play = plays[h];\n      return_time.push(play);\n    } // All Game categories\n\n\n    for (let k = 0; k < Gcats.length; k++) {\n      var Gcat = Gcats[k];\n      return_cats.push(Gcat);\n    } //Difference of parent and child cat\n\n\n    var diff = [];\n    diff = array.filter(function (obj) {\n      return return_cats.indexOf(obj) == -1;\n    });\n    var countzero = diff.length; //Pair of the cat/time is created here\n\n    var pair = return_time.map(function (obj, index) {\n      var myobj = {};\n      myobj[\"name\"] = return_cats[index];\n      myobj[\"value\"] = obj;\n      return myobj;\n    });\n    var myJSON = JSON.stringify(pair); // const distinctCats = [...new Set(Gcats.map(x => x))];\n\n    var minutes = [];\n    var result = pair.reduce(function (r, o) {\n      if (r[o.name]) {\n        r[o.name].value += Number(o.value);\n        minutes.push(r[o.name].value);\n      } else {\n        r[o.name] = {\n          value: Number(o.value)\n        };\n        minutes.push(r[o.name].value);\n      }\n\n      return r;\n    }, {});\n    var highest_time = 0;\n    highest_time = Math.max(...minutes);\n    var finalData = [];\n    var finalresult = [];\n    var finallabel = [];\n    Object.keys(result).forEach(function (name) {\n      // var percent = (result[name].value/highest_time)*100;\n      var percent = result[name].value;\n      var percentage = percent.toFixed(2);\n      finalData.push({\n        text: name,\n        value: percentage\n      });\n      finalresult.push(percentage);\n      finallabel.push(name);\n    }); // In case you want to show all the categories on the graph replace finallabel with finalcat and finalresult with finalmin in dataset config\n\n    var finalmin = [];\n\n    if (array.length > finalresult.length) {\n      finalmin = finalresult.concat(Array(countzero).fill(0));\n    }\n\n    var finalcat = [];\n\n    if (countzero > 0) {\n      finalcat = finallabel.concat(diff);\n    }\n\n    var myfinal = JSON.stringify(finalData);\n    this.setState({\n      data: {\n        labels: finallabel,\n        datasets: [{\n          label: 'Category/Min %',\n          backgroundColor: 'rgba(255,99,132,0.2)',\n          borderColor: 'rgba(255,99,132,1)',\n          borderWidth: 1,\n          hoverBackgroundColor: 'rgba(255,99,132,0.4)',\n          hoverBorderColor: 'rgba(255,99,132,1)',\n          data: finalresult\n        }]\n      }\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.attributes !== this.props.attributes) {}\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"div-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      gutterBottom: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \"Game Minutes / Category\"), React.createElement(Bar, {\n      data: this.state.data,\n      width: 300,\n      height: 180,\n      options: {\n        maintainAspectRatio: true,\n        legend: {\n          display: false\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }));\n  }\n\n}\n\nJourneyCard.propTypes = {\n  attributes: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  attributes: state.attributes.item\n});\n\nexport default connect(mapStateToProps, null)(JourneyCard);","map":{"version":3,"sources":["/Users/anandkumar/Documents/github/c360-playstation/src/Components/ProfileDialog/Journey/JourneyCard.js"],"names":["React","Component","Typography","connect","PropTypes","Bar","JourneyCard","state","data","componentDidMount","attributes","props","profile","allCats","plays","Gcats","return_time","return_cats","array","catarrays","catArr","split","i","length","catarray","push","h","play","k","Gcat","diff","filter","obj","indexOf","countzero","pair","map","index","myobj","myJSON","JSON","stringify","minutes","result","reduce","r","o","name","value","Number","highest_time","Math","max","finalData","finalresult","finallabel","Object","keys","forEach","percent","percentage","toFixed","text","finalmin","concat","Array","fill","finalcat","myfinal","setState","labels","datasets","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","componentDidUpdate","prevProps","render","maintainAspectRatio","legend","display","propTypes","object","isRequired","mapStateToProps","item"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {Bar} from 'react-chartjs-2';\n\nclass JourneyCard extends Component {\n  state = {\n    data: []\n  };\ncomponentDidMount(){\n\n  const attributes = this.props.attributes;\n  const profile = this.props.profile;\n  const allCats =\n    profile[\"all_categories\"] == null\n      ? \"\"\n      : profile[\"all_categories\"];\n  const plays =\n    profile[\"game_minutes\"] == null ? \"\" : profile[\"game_minutes\"];\n  var Gcats =\n    profile[\"game_category\"] == null ? \"\" : profile[\"game_category\"];\n\n\n  var return_time = [];\n  var return_cats = [];\n  let array = [];\n\n  //All category array is built here\n  var catarrays = [];\n  var catArr = allCats;\n  catarrays = catArr.split(\",\");\n\n  for (let i = 0; i < catarrays.length; i++) {\n    var catarray = catarrays[i];\n\n    array.push(catarray);\n  }\n\n  // All game minutes\n  \n  for (let h = 0; h < plays.length; h++) {\n    var play = plays[h];\n\n    return_time.push(play);\n  }\n \n\n\n\n  // All Game categories\n  for (let k = 0; k < Gcats.length; k++) {\n    var Gcat = Gcats[k];\n    return_cats.push(Gcat);\n  }\n\n   //Difference of parent and child cat\n   var diff=[];\n   diff = array.filter(function(obj) { return return_cats.indexOf(obj) == -1; });\n \n  \n  var countzero = diff.length;\n \n  \n\n  //Pair of the cat/time is created here\n  var pair = return_time.map(function(obj, index) {\n    var myobj = {};\n    myobj[\"name\"] = return_cats[index];\n    myobj[\"value\"] = obj;\n    return myobj;\n  });\n\n  var myJSON = JSON.stringify(pair);\n\n  // const distinctCats = [...new Set(Gcats.map(x => x))];\n  var minutes = [];\n  var result = pair.reduce(function(r, o) {\n \n    if (r[o.name]) {\n      r[o.name].value += Number(o.value);\n       minutes.push(r[o.name].value);\n    } else {\n      r[o.name] = { value: Number(o.value) };\n      minutes.push(r[o.name].value);\n    }\n    return r;\n  }, {});\n\n  var highest_time =0;\n  highest_time = Math.max(...minutes);\n  var finalData = [];\n  var finalresult =[];\n  var finallabel=[];\n  Object.keys(result).forEach(function(name) {\n   // var percent = (result[name].value/highest_time)*100;\n   var percent = (result[name].value);\n    var percentage = percent.toFixed(2);\n    finalData.push({ text: name, value: percentage });\n    finalresult.push(percentage);\n    finallabel.push(name);\n  });\n  // In case you want to show all the categories on the graph replace finallabel with finalcat and finalresult with finalmin in dataset config\n  var finalmin=[];\n if (array.length > finalresult.length){\n  finalmin = finalresult.concat(Array(countzero).fill(0));\n }\nvar finalcat =[];\nif (countzero>0){\n  finalcat = finallabel.concat(diff); \n}\n\n\n\n var myfinal = JSON.stringify(finalData);\n\n  this.setState({\n\n data:{\n      labels: finallabel,\n      datasets: [\n        {\n          label: 'Category/Min %',\n          backgroundColor: 'rgba(255,99,132,0.2)',\n          borderColor: 'rgba(255,99,132,1)',\n          borderWidth: 1,\n          hoverBackgroundColor: 'rgba(255,99,132,0.4)',\n          hoverBorderColor: 'rgba(255,99,132,1)',\n          data: finalresult\n        }\n      ]\n    }\n\n  });\n}\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.attributes !== this.props.attributes) {\n      \n  }\n}\n\n  render() {\n    return (\n      <div className=\"div-body\">\n<Typography gutterBottom>Game Minutes / Category</Typography>\n<Bar\n  data={this.state.data}\n  width={300}\n  height={180}\n  options={{ maintainAspectRatio: true,  legend: { display: false} }}\n/>\n\n      </div>\n    );\n  }\n}\n\nJourneyCard.propTypes = {\n  attributes: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  attributes: state.attributes.item\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(JourneyCard);\n"]},"metadata":{},"sourceType":"module"}