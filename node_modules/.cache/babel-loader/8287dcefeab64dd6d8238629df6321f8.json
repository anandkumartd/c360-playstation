{"ast":null,"code":"/**\n * Treasure Configurator\n */\n// Modules\nvar _ = require('./utils/lodash');\n\nvar invariant = require('./utils/misc').invariant;\n\nvar config = require('./config'); // Helpers\n\n\nfunction validateOptions(options) {\n  // options must be an object\n  invariant(_.isObject(options), 'Check out our JavaScript SDK Usage Guide: ' + 'http://docs.treasuredata.com/articles/javascript-sdk');\n  invariant(_.isString(options.writeKey), 'Must provide a writeKey');\n  invariant(_.isString(options.database), 'Must provide a database');\n  invariant(/^[a-z0-9_]{3,255}$/.test(options.database), 'Database must be between 3 and 255 characters and must ' + 'consist only of lower case letters, numbers, and _');\n} // Default config for library values\n\n\nexports.DEFAULT_CONFIG = {\n  database: config.DATABASE,\n  development: false,\n  globalIdCookie: '_td_global',\n  host: config.HOST,\n  logging: true,\n  pathname: config.PATHNAME,\n  requestType: 'jsonp',\n  startInSignedMode: false\n  /**\n   * Treasure#configure\n   *\n   * Initial configurator\n   * Checks validity\n   * Creates and sets up client object\n   *\n   * Modify DEFAULT_CONFIG to change any defaults\n   * Protocol defaults to auto-detection but can be set manually\n   * host defaults to in.treasuredata.com\n   * pathname defaults to /js/v3/event/\n   * requestType is always jsonp\n   *\n   */\n\n};\n\nexports.configure = function configure(options) {\n  this.client = _.assign({\n    globals: {}\n  }, exports.DEFAULT_CONFIG, options, {\n    requestType: 'jsonp'\n  });\n  validateOptions(this.client);\n\n  if (!this.client.endpoint) {\n    this.client.endpoint = 'https://' + this.client.host + this.client.pathname;\n  }\n\n  return this;\n};\n/**\n * Treasure#set\n *\n * Table value setter\n * When you set mutliple attributes, the object is iterated and values are set on the table\n * Attributes are not recursively set on the table\n *\n * Setting a single attribute\n * Example: td.set('table', 'foo', 'bar')\n *\n * Setting multiple properties at once\n * Example: td.set('table', {foo: 'bar', baz: 'qux'})\n *\n * Defaults to setting all attributes in $global\n * The following are equivalent:\n * td.set({foo: 'bar'}) == td.set('$global', {foo: 'bar'})\n *\n * Attributes in $global get applied to all tables\n *\n */\n\n\nexports.set = function set(table, property, value) {\n  if (_.isObject(table)) {\n    property = table;\n    table = '$global';\n  }\n\n  this.client.globals[table] = this.client.globals[table] || {};\n\n  if (_.isObject(property)) {\n    _.assign(this.client.globals[table], property);\n  } else {\n    this.client.globals[table][property] = value;\n  }\n\n  return this;\n};\n/**\n * Treasure#get\n *\n * Table value getter\n *\n * Getting a single attribute\n * Example:\n * td.get('table', 'foo')\n * // > 'bar'\n *\n * Getting all attributes from a table\n * Example:\n * td.get('table')\n * // > {foo: 'bar'}\n *\n * Defaults to getting all attributes from $global\n * The following are equivalent:\n * td.get() == td.get('$global')\n * // > {}\n *\n * If the table does not exist, its object gets created\n *\n */\n\n\nexports.get = function get(table, key) {\n  // If no table, show $global\n  table = table || '$global';\n  this.client.globals[table] = this.client.globals[table] || {};\n  return key ? this.client.globals[table][key] : this.client.globals[table];\n};","map":null,"metadata":{},"sourceType":"script"}