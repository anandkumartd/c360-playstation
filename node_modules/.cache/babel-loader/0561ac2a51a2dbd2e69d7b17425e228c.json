{"ast":null,"code":"var forEach = require('./lodash').forEach;\n\nvar isString = require('./lodash').isString;\n\nvar disposable = require('./misc').disposable; // Info: http://www.quirksmode.org/js/events_properties.html\n\n\nfunction getEventTarget(event) {\n  // W3C says it's event.target, but IE8 uses event.srcElement\n  var target = event.target || event.srcElement || window.document; // If an event takes place on an element that contains text, this text node,\n  // and not the element, becomes the target of the event\n\n  return target.nodeType === 3 ? target.parentNode : target;\n}\n\nfunction addEventListener(el, type, fn) {\n  if (el.addEventListener) {\n    el.addEventListener(type, handler, false);\n    return disposable(function () {\n      el.removeEventListener(type, handler, false);\n    });\n  } else if (el.attachEvent) {\n    el.attachEvent('on' + type, handler);\n    return disposable(function () {\n      el.detachEvent('on' + type, handler);\n    });\n  } else {\n    throw new Error('addEventListener');\n  } // IE8 doesn't pass an event param, grab it from the window if it's missing\n  // Calls the real handler with the correct context, even if we don't use it\n\n\n  function handler(event) {\n    fn.call(el, event || window.event);\n  }\n}\n\nfunction findElement(el) {\n  if (!el || !el.tagName) {\n    return null;\n  }\n\n  for (var tag = el.tagName.toLowerCase(); tag && tag !== 'body'; el = el.parentNode, tag = el && el.tagName && el.tagName.toLowerCase()) {\n    var type = el.getAttribute('type');\n\n    if (tag === 'input' && type === 'password') {\n      return null;\n    }\n\n    var role = el.getAttribute('role');\n\n    if (role === 'button' || role === 'link' || tag === 'a' || tag === 'button' || tag === 'input') {\n      return el;\n    }\n  }\n\n  return null;\n}\n\nfunction createTreeHasIgnoreAttribute(ignoreAttribute) {\n  var dataIgnoreAttribute = 'data-' + ignoreAttribute;\n  return function treeHasIgnoreAttribute(el) {\n    if (!el || !el.tagName || el.tagName.toLowerCase() === 'html') {\n      return false;\n    } else if (hasAttribute(el, ignoreAttribute) || hasAttribute(el, dataIgnoreAttribute)) {\n      return true;\n    } else {\n      return treeHasIgnoreAttribute(el.parentNode);\n    }\n  };\n}\n\nfunction getElementData(el) {\n  var data = {\n    tag: el.tagName.toLowerCase(),\n    tree: htmlTreeAsString(el)\n  };\n  forEach(['alt', 'class', 'href', 'id', 'name', 'role', 'title', 'type'], function (attrName) {\n    if (hasAttribute(el, attrName)) {\n      data[attrName] = el.getAttribute(attrName);\n    }\n  });\n  return data;\n}\n/**\n * ORIGINAL SOURCE: https://github.com/getsentry/raven-js/\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @param elem\n * @returns {string}\n */\n\n\nfunction htmlTreeAsString(elem) {\n  var MAX_TRAVERSE_HEIGHT = 5;\n  var MAX_OUTPUT_LEN = 80;\n  var out = [];\n  var height = 0;\n  var len = 0;\n  var separator = ' > ';\n  var sepLength = separator.length;\n  var nextStr;\n\n  while (elem && height++ < MAX_TRAVERSE_HEIGHT) {\n    nextStr = htmlElementAsString(elem); // bail out if\n    // - nextStr is the 'html' element\n    // - the length of the string that would be created exceeds MAX_OUTPUT_LEN\n    //   (ignore this limit if we are on the first iteration)\n\n    if (nextStr === 'html' || height > 1 && len + out.length * sepLength + nextStr.length >= MAX_OUTPUT_LEN) {\n      break;\n    }\n\n    out.push(nextStr);\n    len += nextStr.length;\n    elem = elem.parentNode;\n  }\n\n  return out.reverse().join(separator);\n}\n/**\n * ORIGINAL SOURCE: https://github.com/getsentry/raven-js/\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @param HTMLElement\n * @returns {string}\n */\n\n\nfunction htmlElementAsString(elem) {\n  var out = [];\n  var className;\n  var classes;\n  var key;\n  var attr;\n  var i;\n\n  if (!elem || !elem.tagName) {\n    return '';\n  }\n\n  out.push(elem.tagName.toLowerCase());\n\n  if (elem.id) {\n    out.push('#' + elem.id);\n  }\n\n  className = elem.className;\n\n  if (className && isString(className)) {\n    classes = className.split(' ');\n\n    for (i = 0; i < classes.length; i++) {\n      out.push('.' + classes[i]);\n    }\n  }\n\n  var attrWhitelist = ['type', 'name', 'title', 'alt'];\n\n  for (i = 0; i < attrWhitelist.length; i++) {\n    key = attrWhitelist[i];\n    attr = elem.getAttribute(key);\n\n    if (attr) {\n      out.push('[' + key + '=\"' + attr + '\"]');\n    }\n  }\n\n  return out.join('');\n}\n/* IE8 does NOT implement hasAttribute */\n\n\nfunction hasAttribute(element, attrName) {\n  if (typeof element.hasAttribute === 'function') {\n    return element.hasAttribute(attrName);\n  }\n\n  return element.getAttribute(attrName) !== null;\n}\n\nmodule.exports = {\n  addEventListener: addEventListener,\n  createTreeHasIgnoreAttribute: createTreeHasIgnoreAttribute,\n  getElementData: getElementData,\n  getEventTarget: getEventTarget,\n  hasAttribute: hasAttribute,\n  htmlElementAsString: htmlElementAsString,\n  htmlTreeAsString: htmlTreeAsString,\n  findElement: findElement\n};","map":null,"metadata":{},"sourceType":"script"}