{"ast":null,"code":"var jsonp = require('jsonp');\n\nvar noop = require('../utils/misc').noop;\n\nvar invariant = require('../utils/misc').invariant;\n\nvar _ = require('../utils/lodash');\n/**\n * Personalization#configure\n *\n * config (Object) - configuration object\n * config.cdpHost (String)\n *    - The host to use for the Personalization API\n *    - defaults to 'cdp.in.treasuredata.com'\n *\n *    Possible values:\n *    Region    cdpHost                       host\n *    AWS East  cdp.in.treasuredata.com       in.treasuredata.com\n *    AWS Tokyo cdp-tokyo.in.treasuredata.com tokyo.in.treasuredata.com\n *    IDCF      cdp-idcf.in.treasuredata.com  idcf.in.treasuredata.com\n */\n\n\nfunction configure(config) {\n  config = _.isObject(config) ? config : {};\n  this.client.cdpHost = config.cdpHost || 'cdp.in.treasuredata.com';\n  return this;\n}\n\nfunction fetchUserSegments(tokenOrConfig, successCallback, errorCallback) {\n  var isConfigObject = _.isObject(tokenOrConfig) && !_.isArray(tokenOrConfig);\n  var audienceToken = isConfigObject ? tokenOrConfig.audienceToken : tokenOrConfig;\n  var keys = isConfigObject && tokenOrConfig.keys || {};\n  successCallback = successCallback || noop;\n  errorCallback = errorCallback || noop;\n  invariant(typeof audienceToken === 'string' || _.isArray(audienceToken), 'audienceToken must be a string or array; received \"' + audienceToken.toString() + '\"');\n  invariant(_.isObject(keys), 'keys must be an object; received \"' + keys + '\"');\n  var token = _.isArray(audienceToken) ? audienceToken.join(',') : audienceToken;\n\n  var keysName = _.keys(keys);\n\n  var keysArray = [];\n\n  _.forEach(keysName, function (key) {\n    keysArray.push(['key.', key, '=', keys[key]].join(''));\n  });\n\n  var keyString = keysArray.join('&');\n  var url = 'https://' + this.client.cdpHost + '/cdp/lookup/collect/segments?version=2&token=' + token + (keyString && '&' + keyString);\n  jsonp(url, {\n    prefix: 'TreasureJSONPCallback',\n    timeout: 10000\n  }, function (err, res) {\n    return err ? errorCallback(err) : successCallback(res);\n  });\n}\n\nmodule.exports = {\n  configure: configure,\n  fetchUserSegments: fetchUserSegments\n};","map":null,"metadata":{},"sourceType":"script"}