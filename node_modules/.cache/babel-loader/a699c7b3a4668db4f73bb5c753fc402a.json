{"ast":null,"code":"/*!\n* ----------------------\n* Treasure Tracker\n* ----------------------\n*/\n// Modules\nvar window = require('global/window');\n\nvar _ = require('../utils/lodash');\n\nvar cookie = require('../vendor/js-cookies');\n\nvar setCookie = require('../utils/setCookie');\n\nvar generateUUID = require('../utils/generateUUID');\n\nvar version = require('../version');\n\nvar document = window.document; // Helpers\n\nfunction configureValues(track) {\n  return _.assign({\n    td_version: function () {\n      return version;\n    },\n    td_client_id: function () {\n      return track.uuid;\n    },\n    td_charset: function () {\n      return (document.characterSet || document.charset || '-').toLowerCase();\n    },\n    td_language: function () {\n      var nav = window.navigator;\n      return (nav && (nav.language || nav.browserLanguage) || '-').toLowerCase();\n    },\n    td_color: function () {\n      return window.screen ? window.screen.colorDepth + '-bit' : '-';\n    },\n    td_screen: function () {\n      return window.screen ? window.screen.width + 'x' + window.screen.height : '-';\n    },\n    td_viewport: function () {\n      var clientHeight = document.documentElement && document.documentElement.clientHeight;\n      var clientWidth = document.documentElement && document.documentElement.clientWidth;\n      var innerHeight = window.innerHeight;\n      var innerWidth = window.innerWidth;\n      var height = clientHeight < innerHeight ? innerHeight : clientHeight;\n      var width = clientWidth < innerWidth ? innerWidth : clientWidth;\n      return width + 'x' + height;\n    },\n    td_title: function () {\n      return document.title;\n    },\n    td_description: function () {\n      return getMeta('description');\n    },\n    td_url: function () {\n      return !document.location || !document.location.href ? '' : document.location.href.split('#')[0];\n    },\n    td_user_agent: function () {\n      return window.navigator.userAgent;\n    },\n    td_platform: function () {\n      return window.navigator.platform;\n    },\n    td_host: function () {\n      return document.location.host;\n    },\n    td_path: function () {\n      return document.location.pathname;\n    },\n    td_referrer: function () {\n      return document.referrer;\n    },\n    td_ip: function () {\n      return 'td_ip';\n    },\n    td_browser: function () {\n      return 'td_browser';\n    },\n    td_browser_version: function () {\n      return 'td_browser_version';\n    },\n    td_os: function () {\n      return 'td_os';\n    },\n    td_os_version: function () {\n      return 'td_os_version';\n    }\n  }, track.values);\n}\n\nfunction configureTrack(track) {\n  return _.assign({\n    pageviews: 'pageviews',\n    events: 'events',\n    values: {}\n  }, track);\n}\n\nfunction configureStorage(storage) {\n  if (storage === 'none') {\n    return false;\n  }\n\n  storage = _.isObject(storage) ? storage : {};\n  return _.assign({\n    name: '_td',\n    expires: 63072000,\n    domain: document.location.hostname,\n    customDomain: !!storage.domain,\n    path: '/'\n  }, storage);\n}\n\nfunction getMeta(metaName) {\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var metas = head.getElementsByTagName('meta');\n  var metaLength = metas.length;\n\n  for (var i = 0; i < metaLength; i++) {\n    if (metas[i].getAttribute('name') === metaName) {\n      return (metas[i].getAttribute('content') || '').substr(0, 8192);\n    }\n  }\n\n  return '';\n}\n/**\n * Track#configure\n *\n * config (Object) - configuration object\n * config.storage (Object|String)\n *    - when object it will overwrite defaults\n * config.storage.name (String)\n *    - cookie name\n *    - defaults to _td\n * config.storage.expires (Number)\n *    - cookie duration in seconds\n *    - when 0 no cookie gets set\n *    - defaults to 63072000 (2 years)\n * config.storage.domain (String)\n *    - domain on which to set the cookie\n *    - defaults to document.location.hostname\n * config.track (Object)\n *    - tracking configuration object\n * config.track.pageviews (String)\n *    - default pageviews table name\n *    - defaults to 'pageviews'\n * config.track.events (String)\n *    - default events table name\n *    - defaults to 'events'\n *\n */\n\n\nexports.configure = function configure(config) {\n  config = _.isObject(config) ? config : {}; // Object configuration for track and storage\n\n  this.client.track = config.track = configureTrack(config.track);\n  this.client.storage = config.storage = configureStorage(config.storage); // If clientId is not set, check cookies\n  // If it's not set after checking cookies, generate a uuid and assign it\n\n  if (_.isNumber(config.clientId)) {\n    config.clientId = config.clientId.toString();\n  } else if (!config.clientId || !_.isString(config.clientId)) {\n    if (config.storage && config.storage.name) {\n      config.clientId = cookie.getItem(config.storage.name);\n    }\n\n    if (!config.clientId || config.clientId === 'undefined') {\n      config.clientId = generateUUID();\n    }\n  }\n\n  this.resetUUID(config.storage, config.clientId);\n  return this;\n};\n/**\n * Track#resetUUID\n *\n * Resets the user's UUID\n */\n\n\nexports.resetUUID = function resetUUID(suggestedStorage, suggestedClientId) {\n  var clientId = suggestedClientId || generateUUID();\n  var storage = suggestedStorage || this.client.storage; // Remove any NULLs that might be present in the clientId\n\n  this.client.track.uuid = clientId.replace(/\\0/g, ''); // Only save cookies if storage is enabled and expires is non-zero\n\n  if (storage) {\n    if (storage.expires) {\n      setCookie(storage, storage.name, undefined);\n      setCookie(storage, storage.name, this.client.track.uuid);\n    }\n  } // Values must be initialized later because they depend on knowing the uuid\n\n\n  this.client.track.values = _.assign(configureValues(this.client.track), this.client.track.values);\n  return this;\n};\n/**\n * Track#trackEvent\n *\n * Like Treasure#addRecord, except that it'll include all track values\n *\n */\n\n\nexports.trackEvent = function trackEvent(table, record, success, failure) {\n  // When no table, use default events table\n  if (!table) {\n    table = this.client.track.events;\n  }\n\n  record = _.assign(this.getTrackValues(), record);\n  this.addRecord(table, record, success, failure);\n  return this;\n};\n/**\n * Track#trackPageview\n *\n * Track impressions on your website\n * Will include location, page, and title\n *\n * Usage:\n * Treasure#trackPageview() - Sets table to default track pageviews\n * Treasure#trackPageview(table, success, failure)\n *\n */\n\n\nexports.trackPageview = function trackPageview(table, success, failure) {\n  // When no table, use default pageviews table\n  if (!table) {\n    table = this.client.track.pageviews;\n  }\n\n  this.trackEvent(table, {}, success, failure);\n  return this;\n};\n/**\n * Track#getTrackValues\n *\n * Returns an object which executes all track value functions\n *\n */\n\n\nexports.getTrackValues = function getTrackValues() {\n  var result = {};\n\n  _.forIn(this.client.track.values, function (value, key) {\n    if (value) {\n      result[key] = typeof value === 'function' ? value() : value;\n    }\n  });\n\n  return result;\n};","map":null,"metadata":{},"sourceType":"script"}