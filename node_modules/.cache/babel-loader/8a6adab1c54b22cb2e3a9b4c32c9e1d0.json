{"ast":null,"code":"var _jsxFileName = \"/Users/anandkumar/Documents/github/td-solution-engineering/c360-PlayStation/src/Components/ProfileDialog/Scores/ScoresCard.js\";\nimport React, { Component } from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport Parser from \"../../../utils/parsers/Parser\";\nimport { fetchPredicts } from \"../../../actions/predictActions\";\nimport axios from \"axios\";\nimport { CircularProgressbar } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport \"./ScoresCard.css\";\n\nclass ScoresCard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      scores_pop: []\n    };\n  }\n\n  componentDidMount() {\n    const attributes = this.props.attributes;\n    const profile = this.props.profile;\n    let currentComponent = this;\n    var percentage = 0;\n    Object.keys(profile).forEach(function (key) {\n      if (key.startsWith(\"td_predictive_score\")) {\n        var splat = key.split(\"_\");\n        var predictID = splat[splat.length - 1];\n\n        if (Number.isInteger(parseInt(predictID))) {\n          percentage = profile[key].toFixed(2);\n          currentComponent.getDataFromAPI(predictID, percentage);\n        }\n      }\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.profile !== this.props.profile) {\n      const attributes = this.props.attributes;\n      const profile = this.props.profile;\n      let currentComponent = this;\n      var percentage = 0;\n      Object.keys(attributes).forEach(function (key) {\n        if (key.startsWith(\"td_predictive_score\")) {\n          var splat = key.split(\"_\");\n          var predictID = splat[splat.length - 1];\n\n          if (Number.isInteger(parseInt(predictID))) {\n            percentage = profile[key].toFixed(2);\n            currentComponent.getDataFromAPI(predictID, percentage); //   REDUX CALL\n            // currentComponent.props.fetchPredicts(predictID, percentage);\n          }\n        }\n      });\n    }\n  }\n\n  getDataFromAPI(predictID, percentage) {\n    axios.defaults.baseURL = \"https://api-staging-cdp.treasuredata.com\";\n    axios.defaults.headers.common[\"Authorization\"] = \"TD1 1199/2fcd68b917650f65455abe67f452fe753ea5b32b\";\n    axios.get(\"/audiences/137520/predictive_segments/\" + predictID + \"/\").then(response => {\n      var pop = this.state.scores_pop.concat(React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(CircularProgressbar, {\n        value: percentage,\n        text: \"\".concat(percentage, \"%\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, response.data.name)));\n      this.setState({\n        // data: pred_score_data,\n        scores_pop: pop\n      });\n    }).catch(error => this.setState({\n      error\n    }));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"div-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      gutterBottom: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"Predictive Scores\"), React.createElement(\"ul\", {\n      className: \"progressBars\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, this.state.scores_pop));\n  }\n\n}\n\nScoresCard.propTypes = {\n  attributes: PropTypes.object.isRequired,\n  fetchPredicts: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  attributes: state.attributes.item,\n  predicts: state.predicts.items\n});\n\nconst mapActionsToProps = {\n  fetchPredicts: fetchPredicts\n};\nexport default connect(mapStateToProps, null)(ScoresCard);","map":{"version":3,"sources":["/Users/anandkumar/Documents/github/td-solution-engineering/c360-PlayStation/src/Components/ProfileDialog/Scores/ScoresCard.js"],"names":["React","Component","Typography","connect","PropTypes","Parser","fetchPredicts","axios","CircularProgressbar","ScoresCard","constructor","props","state","scores_pop","componentDidMount","attributes","profile","currentComponent","percentage","Object","keys","forEach","key","startsWith","splat","split","predictID","length","Number","isInteger","parseInt","toFixed","getDataFromAPI","componentDidUpdate","prevProps","defaults","baseURL","headers","common","get","then","response","pop","concat","data","name","setState","catch","error","render","propTypes","object","isRequired","func","mapStateToProps","item","predicts","items","mapActionsToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport Parser from \"../../../utils/parsers/Parser\";\nimport { fetchPredicts } from \"../../../actions/predictActions\";\nimport axios from \"axios\";\nimport { CircularProgressbar } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport \"./ScoresCard.css\";\nclass ScoresCard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      scores_pop: []\n    };\n  }\n\ncomponentDidMount(){\n  const attributes = this.props.attributes;\n  const profile = this.props.profile;\n  let currentComponent = this;\n  var percentage = 0;\n\n  Object.keys(profile).forEach(function(key) {\n    if (key.startsWith(\"td_predictive_score\")) {\n      var splat = key.split(\"_\");\n      var predictID = splat[splat.length - 1];\n\n      if (Number.isInteger(parseInt(predictID))) {\n        percentage = profile[key].toFixed(2);\n\n        currentComponent.getDataFromAPI(predictID, percentage);\n      }\n      }\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n   if (prevProps.profile !== this.props.profile) {\n     const attributes = this.props.attributes;\n     const profile = this.props.profile;\n      let currentComponent = this;\n      var percentage = 0;\n\n      Object.keys(attributes).forEach(function(key) {\n        if (key.startsWith(\"td_predictive_score\")) {\n          var splat = key.split(\"_\");\n          var predictID = splat[splat.length - 1];\n\n          if (Number.isInteger(parseInt(predictID))) {\n            percentage = profile[key].toFixed(2);\n\n            currentComponent.getDataFromAPI(predictID, percentage);\n            //   REDUX CALL\n            // currentComponent.props.fetchPredicts(predictID, percentage);\n          }\n        }\n      });\n    }\n  }\n\n    \n  getDataFromAPI(predictID, percentage) {\n    \n      axios.defaults.baseURL = \"https://api-staging-cdp.treasuredata.com\"; \n      axios.defaults.headers.common[\"Authorization\"] =\n      \"TD1 1199/2fcd68b917650f65455abe67f452fe753ea5b32b\";\n       axios.get(\"/audiences/137520/predictive_segments/\"+predictID+\"/\")\n         .then(response => {\n          var pop = this.state.scores_pop.concat(\n            <li>\n              <CircularProgressbar value={percentage} text={`${percentage}%`} />\n              <p>{response.data.name}</p>\n            </li>\n          );\n          this.setState({\n            // data: pred_score_data,\n            scores_pop: pop\n          });\n          }) .catch(error =>\n            this.setState({\n              error\n            })\n          );\n      \n  }\n    \n  render() {\n \n \n    return (\n      <div className=\"div-body\">\n        <Typography gutterBottom>Predictive Scores</Typography>\n        <ul className={\"progressBars\"}>{this.state.scores_pop}</ul>\n      </div>\n    );\n\n  }\n\n\n\n\n}\n\nScoresCard.propTypes = {\n  attributes: PropTypes.object.isRequired,\n  fetchPredicts: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  attributes: state.attributes.item,\n  predicts: state.predicts.items\n});\n\nconst mapActionsToProps = {\n  fetchPredicts: fetchPredicts\n};\n\nexport default connect(\n  mapStateToProps,\n null \n)(ScoresCard);\n\n\n\n"]},"metadata":{},"sourceType":"module"}