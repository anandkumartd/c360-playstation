{"ast":null,"code":"/**\n * Treasure Record\n */\n// Modules\nvar invariant = require('./utils/misc').invariant;\n\nvar noop = require('./utils/misc').noop;\n\nvar jsonp = require('jsonp');\n\nvar _ = require('./utils/lodash');\n\nvar cookie = require('./vendor/js-cookies');\n\nvar setCookie = require('./utils/setCookie');\n\nvar objectToBase64 = require('./utils/objectToBase64'); // Helpers\n\n/**\n * Validate record\n */\n\n\nfunction validateRecord(table, record) {\n  invariant(_.isString(table), 'Must provide a table');\n  invariant(/^[a-z0-9_]{3,255}$/.test(table), 'Table must be between 3 and 255 characters and must ' + 'consist only of lower case letters, numbers, and _');\n  invariant(_.isObject(record), 'Must provide a record');\n}\n\nvar BLOCKEVENTSCOOKIE = '__td_blockEvents';\nvar SIGNEDMODECOOKIE = '__td_signed';\nexports.BLOCKEVENTSCOOKIE = BLOCKEVENTSCOOKIE;\nexports.SIGNEDMODECOOKIE = SIGNEDMODECOOKIE;\n/**\n * Block all record-tracking\n */\n\nexports.blockEvents = function blockEvents() {\n  setCookie(this.client.storage, BLOCKEVENTSCOOKIE, 'true');\n};\n/**\n * Unblock record-tracking\n */\n\n\nexports.unblockEvents = function unblockEvents() {\n  setCookie(this.client.storage, BLOCKEVENTSCOOKIE, 'false');\n};\n/**\n * Find event-blocking state\n */\n\n\nexports.areEventsBlocked = function areEventsBlocked() {\n  return cookie.getItem(BLOCKEVENTSCOOKIE) === 'true';\n};\n/**\n * setSignedMode\n *\n * Sets the user to Signed Mode\n */\n\n\nexports.setSignedMode = function setSignedMode(signedMode) {\n  setCookie(this.client.storage, SIGNEDMODECOOKIE, 'true');\n  return this;\n};\n/**\n * setAnonymousMode\n *\n * Sets the user to anonymous mode\n */\n\n\nexports.setAnonymousMode = function setAnonymousMode(signedMode) {\n  setCookie(this.client.storage, SIGNEDMODECOOKIE, 'false');\n  return this;\n};\n/**\n * inSignedMode\n *\n * Tells whether or not the user is in Signed Mode\n */\n\n\nexports.inSignedMode = function inSignedMode() {\n  return cookie.getItem(SIGNEDMODECOOKIE) !== 'false' && (cookie.getItem(SIGNEDMODECOOKIE) === 'true' || this.client.startInSignedMode);\n};\n/**\n * Send record\n */\n\n\nexports._sendRecord = function _sendRecord(request, success, error) {\n  success = success || noop;\n  error = error || noop;\n\n  if (this.areEventsBlocked()) {\n    return;\n  }\n\n  invariant(request.type === 'jsonp', 'Request type ' + request.type + ' not supported');\n  var params = ['api_key=' + encodeURIComponent(request.apikey), 'modified=' + encodeURIComponent(new Date().getTime()), 'data=' + encodeURIComponent(objectToBase64(request.record))];\n\n  if (request.time) {\n    params.push('time=' + encodeURIComponent(request.time));\n  }\n\n  var jsonpUrl = request.url + '?' + params.join('&');\n  jsonp(jsonpUrl, {\n    prefix: 'TreasureJSONPCallback',\n    timeout: 10000 // 10 seconds timeout\n\n  }, function (err, res) {\n    return err ? error(err) : success(res);\n  });\n}; // Methods\n\n/**\n * Treasure#applyProperties\n *\n * Applies properties on a a payload object\n *\n * Starts with an empty object and applies properties in the following order:\n * $global -> table -> payload\n *\n * $global attributes are initially set on all objects\n * table attributes overwrite $global attributes for specific tables\n * payload attributes overwrite set $global and table attributes\n *\n * Expects a table name and a payload object as parameters\n * Returns a new object with all properties applied\n *\n * Example:\n * td.set('$global', 'foo', 'bar')\n * td.set('$global', 'bar', 'foo')\n * td.set('table', 'foo', 'foo')\n *\n * td.applyProperties('sales', {})\n * // > { foo: 'bar', bar: 'foo'}\n *\n * td.applyProperties('table', {})\n * // > { foo: 'foo', bar: 'foo'}\n *\n * td.applyProperties('table', {bar: 'bar'})\n * // > { foo: 'foo', bar: 'bar'}\n *\n * td.applyProperties('table', {foo: 'qux'})\n * // > { foo: 'qux', bar: 'foo'}\n *\n */\n\n\nexports.applyProperties = function applyProperties(table, payload) {\n  return _.assign({}, this.get('$global'), this.get(table), payload);\n};\n/**\n * Treasure#addRecord\n *\n * Takes a table and a record\n *\n */\n\n\nexports.addRecord = function addRecord(table, record, success, error) {\n  validateRecord(table, record);\n  var propertiesRecord = this.applyProperties(table, record);\n  var finalRecord = this.inSignedMode() ? propertiesRecord : _.omit(propertiesRecord, ['td_ip', 'td_client_id', 'td_global_id']);\n  var request = {\n    apikey: this.client.writeKey,\n    record: finalRecord,\n    time: null,\n    type: this.client.requestType,\n    url: this.client.endpoint + this.client.database + '/' + table\n  };\n\n  if (request.record.time) {\n    request.time = request.record.time;\n  }\n\n  if (this.client.development) {\n    this.log('addRecord', request);\n  } else if (!this.areEventsBlocked()) {\n    this._sendRecord(request, success, error);\n  }\n}; // Private functions, for testing only\n\n\nexports._validateRecord = validateRecord;","map":null,"metadata":{},"sourceType":"script"}