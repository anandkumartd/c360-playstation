{"ast":null,"code":"import _objectSpread from \"/Users/anandkumar/Documents/github/td-solution-engineering/c360-PlayStation/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/anandkumar/Documents/github/td-solution-engineering/c360-PlayStation/src/Components/ProfileDialog/Segments/SegmentsCard.js\";\nimport React, { Component } from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport axios from \"axios\";\nimport \"./SegmentsCard.css\";\n\nvar Treasure = require('td-js-sdk');\n\nvar td = new Treasure({\n  database: 'c360',\n  writeKey: '1199/a820ff5a25e36501cc8651472f667d80231611ef',\n  cdpHost: 'cdp-staging.in.treasuredata.com',\n  host: 'in-staging.treasuredata.com'\n});\n\nclass SegmentsCard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      return_segments: [],\n      segment_id: null,\n      segment_name: [],\n      segment_pop: [],\n      population: [],\n      pop: [],\n      total_pop: [],\n      return_width: []\n    };\n  }\n\n  componentDidMount() {\n    var segments = [];\n    var return_segments_temp = [];\n    let currentComponent = this;\n    const profile = this.props.profile;\n    const clientID = profile[\"td_client_id\"] == null ? \"\" : profile[\"td_client_id\"];\n    const Email = profile[\"email\"] == null ? \"\" : profile[\"email\"];\n\n    var successCallback = function (key, values) {\n      var json;\n      json = JSON.stringify(key);\n      var obj = JSON.parse(json);\n      segments = obj[0].values;\n\n      for (let i = 0; i < segments.length; i++) {\n        var segment = segments[i];\n        currentComponent.getDataFromAPI(segment);\n        return_segments_temp.push(React.createElement(\"li\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          },\n          __self: this\n        }, segment));\n      }\n\n      currentComponent.setState({\n        return_segments: return_segments_temp\n      });\n    };\n\n    var errorCallback = function (err) {\n      console.log(err);\n    };\n\n    td.fetchUserSegments({\n      'audienceToken': '270eb2db-0557-49c6-9449-e8df59f251c6',\n      'version': '2',\n      keys: {\n        'td_client_id': clientID\n      }\n    }, successCallback, errorCallback);\n  }\n\n  getDataFromAPI(segment) {\n    // proxy url to be used for removing CORS errors\n    var proxyURL = \"https://fierce-ridge-46359.herokuapp.com/\";\n    axios.defaults.baseURL = proxyURL + \"https://api-staging-cdp.treasuredata.com\";\n    axios.defaults.headers.common[\"Authorization\"] = \"TD1 1199/2fcd68b917650f65455abe67f452fe753ea5b32b\";\n    axios.get(\"/audiences/137520/segments/\" + segment + \"/\").then(response => {\n      var total_pops = this.state.total_pop;\n      var max = Math.max(...total_pops);\n      var popseg = this.state.total_pop.concat(response.data.population);\n      var pop = this.state.segment_pop.concat(React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, response.data.population));\n      var new_seg_name = this.state.segment_name.concat(React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, response.data.name));\n      var Newpopulation = this.state.population.concat(response.data.population);\n      this.setState({\n        total_pop: popseg,\n        segment_pop: pop,\n        segment_name: new_seg_name,\n        Newpopulation: [...this.state.population, response.data.population],\n        isLoading: false\n      });\n    }).catch(error => this.setState({\n      error,\n      isLoading: false\n    }));\n  }\n\n  render() {\n    var total_pops = this.state.total_pop;\n\n    var single_pop = _objectSpread({}, this.state.segment_pop);\n\n    var highest_pop = Math.max(...total_pops);\n    let array = [];\n\n    for (let i = 0; i < total_pops.length; i++) {\n      var single_pop = total_pops[i];\n      var width = single_pop / highest_pop * 100;\n      array.push(React.createElement(\"span\", {\n        value: width,\n        style: {\n          width: width + '%'\n        },\n        className: \"segment_\" + single_pop,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }));\n    }\n\n    return React.createElement(\"div\", {\n      className: \"div-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"innercontainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      gutterBottom: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"Matching Segments\"), React.createElement(\"div\", {\n      className: \"heading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \"# of Total Profiles\"), React.createElement(\"table\", {\n      className: \"segmentTable\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      className: \"segmentName\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, this.state.segment_name)), React.createElement(\"td\", {\n      className: \"graphbar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, array.map(function (name, index) {\n      return React.createElement(\"li\", {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, name);\n    }))), React.createElement(\"td\", {\n      className: \"segmentPop\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, this.state.segment_pop)))))));\n  }\n\n}\n\nexport default SegmentsCard;","map":{"version":3,"sources":["/Users/anandkumar/Documents/github/td-solution-engineering/c360-PlayStation/src/Components/ProfileDialog/Segments/SegmentsCard.js"],"names":["React","Component","Typography","axios","Treasure","require","td","database","writeKey","cdpHost","host","SegmentsCard","constructor","props","state","return_segments","segment_id","segment_name","segment_pop","population","pop","total_pop","return_width","componentDidMount","segments","return_segments_temp","currentComponent","profile","clientID","Email","successCallback","key","values","json","JSON","stringify","obj","parse","i","length","segment","getDataFromAPI","push","setState","errorCallback","err","console","log","fetchUserSegments","keys","proxyURL","defaults","baseURL","headers","common","get","then","response","total_pops","max","Math","popseg","concat","data","new_seg_name","name","Newpopulation","isLoading","catch","error","render","single_pop","highest_pop","array","width","map","index"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport axios from \"axios\";\nimport \"./SegmentsCard.css\";\n\nvar Treasure = require('td-js-sdk')\nvar td = new Treasure({\n        database: 'c360',\n        writeKey: '1199/a820ff5a25e36501cc8651472f667d80231611ef',\n        cdpHost: 'cdp-staging.in.treasuredata.com',\n        host: 'in-staging.treasuredata.com'\n      });\n\nclass SegmentsCard extends Component {\n  constructor(props) {\nsuper(props);\n\nthis.state = {\nreturn_segments: [],\nsegment_id: null,\nsegment_name: [],\nsegment_pop: [],\npopulation: [],\npop: [],\ntotal_pop: [],\nreturn_width: []\n};\n}\n\n\n  componentDidMount() {\n    var segments = [];\n    var return_segments_temp = [];\n    let currentComponent = this;\n   const profile = this.props.profile;\n   const clientID=(profile[\"td_client_id\"] == null ? \"\" : profile[\"td_client_id\"]);\n   const Email=(profile[\"email\"] == null ? \"\" : profile[\"email\"]);\n   var successCallback = function (key,values) {\n   \n   var json;\n   json = JSON.stringify(key);\n   var obj = JSON.parse(json);\n   segments = obj[0].values;\n  \n\n   \n   for(let i = 0; i < segments.length; i++){\n         var segment = segments[i];\n\n     currentComponent.getDataFromAPI(segment);\n     return_segments_temp.push(<li>{segment}</li>);\n     }\n    \n   currentComponent.setState({\n   return_segments : return_segments_temp\n   });\n   };\n   \n \n   \n   var errorCallback = function(err) {\n         console.log(err);\n       };\n       td.fetchUserSegments({\n         'audienceToken': '270eb2db-0557-49c6-9449-e8df59f251c6',\n               'version': '2',\n               keys: {\n                 'td_client_id': clientID\n                 }\n       }, successCallback, errorCallback)\n   \n       \n    \n  }\n\n  getDataFromAPI(segment) {\n    // proxy url to be used for removing CORS errors\n    var proxyURL = \"https://fierce-ridge-46359.herokuapp.com/\"\n    \n    axios.defaults.baseURL = proxyURL+\"https://api-staging-cdp.treasuredata.com\"; \n axios.defaults.headers.common[\"Authorization\"] =\n\"TD1 1199/2fcd68b917650f65455abe67f452fe753ea5b32b\";\n  axios.get(\"/audiences/137520/segments/\"+ segment +\"/\" )\n    .then(response =>\n      {\n   \n     var total_pops = this.state.total_pop;\n     var max = Math.max(...total_pops);\n  \n     var popseg = this.state.total_pop.concat(response.data.population)\n    \n    \n    var pop = this.state.segment_pop.concat(<li>{response.data.population}</li>)\n     var new_seg_name = this.state.segment_name.concat(<li>{response.data.name}</li>)\n     var Newpopulation = this.state.population.concat(response.data.population)\n   \n     \n      this.setState({\n        total_pop : popseg,\n        segment_pop: pop,\n       segment_name: new_seg_name,\n       Newpopulation: [ ...this.state.population, response.data.population ],\n        isLoading: false\n      })\n    } )\n    \n    .catch(error =>\n      this.setState({\n        error,\n        isLoading: false\n      })\n    );\n\n}\n\n  render() {\n    var total_pops = this.state.total_pop;\n    var single_pop = {...this.state.segment_pop};\n     var highest_pop = Math.max(...total_pops);\n    let array = [];\n     for(let i = 0; i < total_pops.length; i++){\n       var single_pop = total_pops[i];\n var width = (single_pop/highest_pop)*100;\n array.push(\n<span value={width} style={{width: width+'%'}} className={\"segment_\"+single_pop}></span>\n );\n \n   }\n \n\n    return (\n      <div className=\"div-body\">\n        <div className=\"innercontainer\">\n       <Typography gutterBottom>Matching Segments</Typography>\n       <div className=\"heading\"># of Total Profiles</div>\n       <table className={\"segmentTable\"}><tbody>\n         <tr><td className={\"segmentName\"}><ul>{this.state.segment_name}</ul></td>\n        <td className={\"graphbar\"}><ul>{array.map(function(name, index){\n                    return <li key={ index } >{name}</li>;\n                  })}</ul></td>\n         <td className={\"segmentPop\"}><ul>{this.state.segment_pop}</ul></td>\n         </tr>\n       </tbody></table>\n        </div>\n       </div>\n    );\n\n  }\n \n\n\n}\n\nexport default SegmentsCard;\n\n\n\n"]},"metadata":{},"sourceType":"module"}